syntax = "proto3";

package com.android.server.healthconnect.proto;

option java_multiple_files=true;

// FHIR spec details required for Health Connect PHR validation of medical data (FHIR resources
// received as JSON strings).
message FhirResourceSpec {
    // A map of the FHIR resource type int to the FHIR spec config.
    // The resource type int has to match one of the resource types in FhirResource.java
    map<int32, FhirDataTypeConfig> resource_type_to_config = 1;
}

// The FHIR spec config of a resource or data type.
message FhirDataTypeConfig {
    // A map of all field names to field config for this data type. The keys of this map is the list
    // of fields that are allowed to be populated.
    map<string, FhirFieldConfig> allowed_field_names_to_config = 1;

    // The list of fields that are required to be present for this data type.
    // Note that this does not include required oneofs which have a separate config.
    repeated string required_fields = 2;

}

// The FHIR spec config of a FHIR field.
message FhirFieldConfig {
    // Whether or not the field is an array.
    optional bool is_array = 1;

    // The data type of this field.
    R4FhirType r4_type = 2;

    // The kind of FHIR data type of this field.
    // TODO: b/361775175 - this should be moved to the FhirDataTypeConfig instead, when we have
    //  configs for types.
    Kind kind = 3;
}

// Represents the kind of fhir data type, as found in the StructureDefinition.kind field
// (https://hl7.org/fhir/R4/valueset-structure-definition-kind.html). See
// https://hl7.org/fhir/R4/valueset-structure-definition-kind.html for a description of the
// different values.
enum Kind {
    KIND_UNSPECIFIED = 0;
    // The data type is a resource type.
    KIND_RESOURCE = 1;
    // The data type is a primitive type.
    KIND_PRIMITIVE_TYPE = 2;
    // The data type is a complex type. For our use case this applies to any type that is not a
    // resource or a primitive type.
    KIND_COMPLEX_TYPE = 3;
}

// The R4 Fhir type used to indicate the type of a field extracted from the fhir spec.
// Note that all complex data types (non-primitive type) are combined under R4_FHIR_TYPE_COMPLEX
// for now.
enum R4FhirType {
    R4_FHIR_TYPE_UNSPECIFIED = 0;
    R4_FHIR_TYPE_COMPLEX = 1;
    R4_FHIR_TYPE_BOOLEAN = 2;
    R4_FHIR_TYPE_CODE = 3;
    R4_FHIR_TYPE_DATE_TIME = 4;
    R4_FHIR_TYPE_INSTANT = 5;
    R4_FHIR_TYPE_INTEGER = 6;
    R4_FHIR_TYPE_STRING = 7;
    R4_FHIR_TYPE_SYSTEM_STRING = 8;
    R4_FHIR_TYPE_URI = 9;
    R4_FHIR_TYPE_DATE = 10;
    R4_FHIR_TYPE_CANONICAL = 11;
    R4_FHIR_TYPE_TIME = 12;
}