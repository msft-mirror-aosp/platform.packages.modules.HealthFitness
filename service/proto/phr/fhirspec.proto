syntax = "proto3";

package com.android.server.healthconnect.proto;

option java_multiple_files=true;

// FHIR spec details required for Health Connect PHR validation of medical data (FHIR resources
// received as JSON strings).
message FhirResourceSpec {
    // A map of the FHIR resource type int to the FHIR spec config.
    // The resource type int has to match one of the resource types in FhirResource.java
    map<int32, FhirComplexTypeConfig> resource_type_to_config = 1;
}

// The FHIR spec config of a resource or complex type.
message FhirComplexTypeConfig {
    // A map of all field names to field config for this data type. The keys of this map is the list
    // of fields that are allowed to be populated.
    map<string, FhirFieldConfig> allowed_field_names_to_config = 1;

    // The list of fields that are required to be present for this data type.
    // Note that this does not include required multi type fields. Whether or not these are required
    // will be contained in the multi_type_fields configs (see next field).
    repeated string required_fields = 2;

    // The list of fields where one of several data type fields can be set.
    // This is used to validate only one of each field is set and that exactly one is set if the
    // field is required.
    // Note that this config needs to be used to determine whether a multi type field is required
    // or not, as these fields will not be included in the required_fields list above.
    repeated MultiTypeFieldConfig multi_type_fields = 3;

}

// Represents the config of a FHIR field where a choice of data types can be set.
// See https://build.fhir.org/formats.html#choice for more background.
message MultiTypeFieldConfig {
    // The name of the field without type suffix
    optional string name = 1;

    // The possible fields of a specific type that can be set in the json resource, e.g.
    // "occurrenceDataTime", "occurrenceString". Only one of these fields is allowed to be present.
    repeated string typed_field_names = 2;

    // Whether or not the field is a required field.
    // If true, exactly one of the fields in type_field_names is expected to be present.
    optional bool is_required = 3;
}

// The FHIR spec config of a FHIR field.
message FhirFieldConfig {
    // Whether or not the field is an array.
    optional bool is_array = 1;

    // The data type of this field.
    R4FhirType r4_type = 2;

    // The kind of FHIR data type of this field.
    // TODO: b/361775175 - this should be moved to the FhirComplexTypeConfig instead, when we have
    //  configs for types.
    Kind kind = 3;
}

// Represents the kind of fhir data type, as found in the StructureDefinition.kind field
// (https://hl7.org/fhir/R4/valueset-structure-definition-kind.html). See
// https://hl7.org/fhir/R4/valueset-structure-definition-kind.html for a description of the
// different values.
enum Kind {
    KIND_UNSPECIFIED = 0;
    // The data type is a resource type.
    KIND_RESOURCE = 1;
    // The data type is a primitive type.
    KIND_PRIMITIVE_TYPE = 2;
    // The data type is a complex type. For our use case this applies to any type that is not a
    // resource or a primitive type.
    KIND_COMPLEX_TYPE = 3;
}

// The R4 Fhir type used to indicate the type of a field extracted from the fhir spec.
// Note that all complex data types (non-primitive type) are combined under R4_FHIR_TYPE_COMPLEX
// for now.
// Next ID: 44
enum R4FhirType {
    R4_FHIR_TYPE_UNSPECIFIED = 0;
    R4_FHIR_TYPE_ADDRESS = 1;
    R4_FHIR_TYPE_AGE = 2;
    R4_FHIR_TYPE_ANNOTATION = 3;
    R4_FHIR_TYPE_ATTACHMENT = 4;
    R4_FHIR_TYPE_BACKBONE_ELEMENT = 5;
    R4_FHIR_TYPE_BASE64_BINARY = 6;
    R4_FHIR_TYPE_BOOLEAN = 7;
    R4_FHIR_TYPE_CANONICAL = 8;
    R4_FHIR_TYPE_CODE = 9;
    R4_FHIR_TYPE_CODEABLE_CONCEPT = 10;
    R4_FHIR_TYPE_CODING = 11;
    R4_FHIR_TYPE_CONTACT_POINT = 12;
    R4_FHIR_TYPE_DATE = 13;
    R4_FHIR_TYPE_DATE_TIME = 14;
    R4_FHIR_TYPE_DECIMAL = 15;
    R4_FHIR_TYPE_DOSAGE = 16;
    R4_FHIR_TYPE_DURATION = 17;
    R4_FHIR_TYPE_EXTENSION = 18;
    R4_FHIR_TYPE_HUMAN_NAME = 19;
    R4_FHIR_TYPE_ID = 20;
    R4_FHIR_TYPE_IDENTIFIER = 21;
    R4_FHIR_TYPE_INSTANT = 22;
    R4_FHIR_TYPE_INTEGER = 23;
    R4_FHIR_TYPE_MARKDOWN = 24;
    R4_FHIR_TYPE_META = 25;
    R4_FHIR_TYPE_NARRATIVE = 26;
    R4_FHIR_TYPE_OID = 27;
    R4_FHIR_TYPE_PERIOD = 28;
    R4_FHIR_TYPE_POSITIVE_INT = 29;
    R4_FHIR_TYPE_QUANTITY = 30;
    R4_FHIR_TYPE_RANGE = 31;
    R4_FHIR_TYPE_RATIO = 32;
    R4_FHIR_TYPE_REFERENCE = 33;
    R4_FHIR_TYPE_RESOURCE = 34;
    R4_FHIR_TYPE_SAMPLED_DATA = 35;
    R4_FHIR_TYPE_STRING = 36;
    R4_FHIR_TYPE_TIME = 37;
    R4_FHIR_TYPE_TIMING = 38;
    R4_FHIR_TYPE_UNSIGNED_INT = 39;
    R4_FHIR_TYPE_URI = 40;
    R4_FHIR_TYPE_URL = 41;
    R4_FHIR_TYPE_UUID = 42;
    // TODO:b/377701407 - Remove this after extracting complex types correctly
    R4_FHIR_TYPE_COMPLEX = 43;

}